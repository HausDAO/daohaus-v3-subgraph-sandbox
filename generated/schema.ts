// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Dao extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("transactionHashSummon", Value.fromBytes(Bytes.empty()));
    this.set("lootAddress", Value.fromBytes(Bytes.empty()));
    this.set("safeAddress", Value.fromBytes(Bytes.empty()));
    this.set("lootPaused", Value.fromBoolean(false));
    this.set("sharesPaused", Value.fromBoolean(false));
    this.set("totalShares", Value.fromBigInt(BigInt.zero()));
    this.set("totalLoot", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Dao entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Dao entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Dao", id.toString(), this);
    }
  }

  static load(id: string): Dao | null {
    return changetype<Dao | null>(store.get("Dao", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get transactionHashSummon(): Bytes {
    let value = this.get("transactionHashSummon");
    return value!.toBytes();
  }

  set transactionHashSummon(value: Bytes) {
    this.set("transactionHashSummon", Value.fromBytes(value));
  }

  get lootAddress(): Bytes {
    let value = this.get("lootAddress");
    return value!.toBytes();
  }

  set lootAddress(value: Bytes) {
    this.set("lootAddress", Value.fromBytes(value));
  }

  get safeAddress(): Bytes {
    let value = this.get("safeAddress");
    return value!.toBytes();
  }

  set safeAddress(value: Bytes) {
    this.set("safeAddress", Value.fromBytes(value));
  }

  get lootPaused(): boolean {
    let value = this.get("lootPaused");
    return value!.toBoolean();
  }

  set lootPaused(value: boolean) {
    this.set("lootPaused", Value.fromBoolean(value));
  }

  get sharesPaused(): boolean {
    let value = this.get("sharesPaused");
    return value!.toBoolean();
  }

  set sharesPaused(value: boolean) {
    this.set("sharesPaused", Value.fromBoolean(value));
  }

  get gracePeriod(): BigInt | null {
    let value = this.get("gracePeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gracePeriod(value: BigInt | null) {
    if (!value) {
      this.unset("gracePeriod");
    } else {
      this.set("gracePeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get votingPeriod(): BigInt | null {
    let value = this.get("votingPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set votingPeriod(value: BigInt | null) {
    if (!value) {
      this.unset("votingPeriod");
    } else {
      this.set("votingPeriod", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposalOffering(): BigInt | null {
    let value = this.get("proposalOffering");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposalOffering(value: BigInt | null) {
    if (!value) {
      this.unset("proposalOffering");
    } else {
      this.set("proposalOffering", Value.fromBigInt(<BigInt>value));
    }
  }

  get quorumPercent(): BigInt | null {
    let value = this.get("quorumPercent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set quorumPercent(value: BigInt | null) {
    if (!value) {
      this.unset("quorumPercent");
    } else {
      this.set("quorumPercent", Value.fromBigInt(<BigInt>value));
    }
  }

  get sponsorThreshold(): BigInt | null {
    let value = this.get("sponsorThreshold");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sponsorThreshold(value: BigInt | null) {
    if (!value) {
      this.unset("sponsorThreshold");
    } else {
      this.set("sponsorThreshold", Value.fromBigInt(<BigInt>value));
    }
  }

  get minRetentionPercent(): BigInt | null {
    let value = this.get("minRetentionPercent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minRetentionPercent(value: BigInt | null) {
    if (!value) {
      this.unset("minRetentionPercent");
    } else {
      this.set("minRetentionPercent", Value.fromBigInt(<BigInt>value));
    }
  }

  get shareTokenName(): string | null {
    let value = this.get("shareTokenName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set shareTokenName(value: string | null) {
    if (!value) {
      this.unset("shareTokenName");
    } else {
      this.set("shareTokenName", Value.fromString(<string>value));
    }
  }

  get shareTokenSymbol(): string | null {
    let value = this.get("shareTokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set shareTokenSymbol(value: string | null) {
    if (!value) {
      this.unset("shareTokenSymbol");
    } else {
      this.set("shareTokenSymbol", Value.fromString(<string>value));
    }
  }

  get totalShares(): BigInt {
    let value = this.get("totalShares");
    return value!.toBigInt();
  }

  set totalShares(value: BigInt) {
    this.set("totalShares", Value.fromBigInt(value));
  }

  get totalLoot(): BigInt {
    let value = this.get("totalLoot");
    return value!.toBigInt();
  }

  set totalLoot(value: BigInt) {
    this.set("totalLoot", Value.fromBigInt(value));
  }

  get metaData(): string | null {
    let value = this.get("metaData");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metaData(value: string | null) {
    if (!value) {
      this.unset("metaData");
    } else {
      this.set("metaData", Value.fromString(<string>value));
    }
  }
}

export class MetaData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("createdBy", Value.fromBytes(Bytes.empty()));
    this.set("rawContent", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MetaData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MetaData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MetaData", id.toString(), this);
    }
  }

  static load(id: string): MetaData | null {
    return changetype<MetaData | null>(store.get("MetaData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get createdBy(): Bytes {
    let value = this.get("createdBy");
    return value!.toBytes();
  }

  set createdBy(value: Bytes) {
    this.set("createdBy", Value.fromBytes(value));
  }

  get dao(): string | null {
    let value = this.get("dao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dao(value: string | null) {
    if (!value) {
      this.unset("dao");
    } else {
      this.set("dao", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get rawContent(): string {
    let value = this.get("rawContent");
    return value!.toString();
  }

  set rawContent(value: string) {
    this.set("rawContent", Value.fromString(value));
  }
}

export class Member extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
    this.set("memberAddress", Value.fromBytes(Bytes.empty()));
    this.set("shares", Value.fromBigInt(BigInt.zero()));
    this.set("loot", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Member entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Member entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Member", id.toString(), this);
    }
  }

  static load(id: string): Member | null {
    return changetype<Member | null>(store.get("Member", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }

  get dao(): string | null {
    let value = this.get("dao");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dao(value: string | null) {
    if (!value) {
      this.unset("dao");
    } else {
      this.set("dao", Value.fromString(<string>value));
    }
  }

  get memberAddress(): Bytes {
    let value = this.get("memberAddress");
    return value!.toBytes();
  }

  set memberAddress(value: Bytes) {
    this.set("memberAddress", Value.fromBytes(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get loot(): BigInt {
    let value = this.get("loot");
    return value!.toBigInt();
  }

  set loot(value: BigInt) {
    this.set("loot", Value.fromBigInt(value));
  }
}

export class EventTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("createdAt", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventTransaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EventTransaction entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EventTransaction", id.toString(), this);
    }
  }

  static load(id: string): EventTransaction | null {
    return changetype<EventTransaction | null>(
      store.get("EventTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): string {
    let value = this.get("createdAt");
    return value!.toString();
  }

  set createdAt(value: string) {
    this.set("createdAt", Value.fromString(value));
  }
}
