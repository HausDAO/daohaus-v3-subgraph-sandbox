type Dao @entity {
  id: ID!
  createdAt: String!
  transactionHashSummon: Bytes!
  lootAddress: Bytes!
  safeAddress: Bytes!
  lootPaused: Boolean!
  sharesPaused: Boolean!
  gracePeriod: BigInt!
  votingPeriod: BigInt!
  proposalOffering: BigInt!
  quorumPercent: BigInt!
  sponsorThreshold: BigInt!
  minRetentionPercent: BigInt!
  shareTokenName: String
  shareTokenSymbol: String
  totalShares: BigInt!
  totalLoot: BigInt!
  latestSponsoredProposalId: BigInt!
  proposals: [Proposal!] @derivedFrom(field: "dao")
  members: [Member!] @derivedFrom(field: "dao")
  metaData: MetaData @derivedFrom(field: "dao")
}

type Proposal @entity {
  id: ID!
  createdAt: String!
  createdBy: Bytes!
  dao: Dao!
  proposalId: BigInt!
  prevProposalId: BigInt!
  proposalDataHash: Bytes!
  votingPeriod: BigInt!
  votingStarts: BigInt!
  votingEnds: BigInt!
  graceEnds: BigInt!
  proposalData: Bytes!
  expiration: BigInt!
  details: String!
  selfSponsor: Boolean!
  sponsored: Boolean!
  cancelled: Boolean!
  processed: Boolean!
  sponsor: Bytes!
  actionFailed: Boolean!
  passed: Boolean!
  proposalOffering: BigInt!
}

type MetaData @entity {
  id: ID!
  createdAt: String!
  createdBy: Bytes!
  dao: Dao
  name: String
  rawContent: String!
}

type Member @entity {
  id: ID!
  createdAt: String!
  dao: Dao!
  memberAddress: Bytes!
  shares: BigInt!
  loot: BigInt!
}

type Shaman @entity {
  id: ID!
  createdAt: String!
  dao: Dao!
  shamanAddress: Bytes!
  permissions: BigInt!
}

type EventTransaction @entity {
  id: ID!
  createdAt: String!
}
